#include <iostream>
using namespace std;
template <typename T>
class SortedArray{
 public:
  SortedArray(){
    values_=NULL;
    size_ =0,alloc_=0;
  }
  SortedArray(const SortedArray& a){
    Reserve(a.size());
    for(int i=0;i<a.size;++i){
      values_[i]=a(i);
    }
  }
  SortedArray(size_t size){
    Reserve(size);
  }
  ~SortedArray(){
    delete[] values_;
  }
  SortedArray& operator=(const SortedArray& a){
    Reserve((int)a.size());
    for(int i=0; i<a.size();++i)
      values_[i]=a.values_[i];
    return *this;
  }
  size_t size() const{return size_;}
  const T& operator()(int idx) const{
    return values_[idx];
  }
  void Reserve(int size){
    size_ =size;
    values_=new T[size];
  }
  void Add(const T& value){
    values_[alloc_]=value;
    alloc_++;
    for(int i=0;i<alloc_-1;++i){
      for(int j=0;j<alloc_-(i+1);++j){
	if(values_[j]>values_[j+1]){
	  T temp = values_[j+1];
	  values_[j+1]=values_[j];
	  values_[j]=temp;
	}
	
      }
    }
  }
  int Find(const T& value){
    for(int i=0; i<size_;i++){
      if(values_[i]==value)
	return i;
    }
    return -1;
   
  }
 private:
  T* values_;
  int size_,alloc_;

};
template <typename T>
istream& operator>>(istream& is,SortedArray<T>& a){
  int size;
  is>>size;
  a.Reserve(size);
  for(int i=0;i<size;i++){
    T add;
    is >>add;
    a.Add(add);
  }
  return is;
}
template <typename T>
ostream& operator<<(ostream& os,const SortedArray<T>& a){
  for(int i=0;i<a.size();++i)
    os<<a(i)<<" ";
  return os;

}
